// data for tetris
#pragma once

static const char drawjs_code[3070] = "function setFS(cN,alpha){\n\tc.fillStyle = cN;\n\tc.globalAlpha = alpha;\n}\n\nfunction p3(x1,y1,x2,y2){\n\tc.beginPath();\n\tc.moveTo(x1,y1);\n\tc.lineTo(x2,y2);\n\tc.lineTo(10,10);\n\tc.closePath();\n\tc.fill();\n}\n\nfunction block(colorId){\n\tsetFS(color[colorId],1);\n\tc.fillRect(0,0,20,20);\n\tsetFS(\'white\',0.6);\n\tp3(0,0,20,0);\n\tsetFS(\'white\',0.3);\n\tp3(0,0,0,20);\n\tsetFS(\'black\',0.3);\n\tp3(20,20,20,0);\n\tsetFS(\'black\',0.5);\n\tp3(20,20,0,20);\n\tsetFS(color[colorId],1);\n\tc.fillRect(3,3,14,14);\n}\n\nfunction drawBlocks(x,y,mx){\n\tfor(var i=0;i<x;i++){\n\t\tfor(var j=0;j<y;j++){\t\t\t\t\n\t\t\tif(typeof mx[i][j] != \"undefined\" ){\n\t\t\t\tblock(mx[i][j]);\n\t\t\t}\n\t\t\tc.translate(0,20);\n\t\t}\n\t\tc.translate(20,-20*y);\n\t}\n}\n\nfunction drawBoard(){\n\tc.save();\n\tc.translate(40,40);\n\tsetFS(\'black\',1);\n\tc.fillRect(0,0,200,400);\n\tdrawBlocks(10,20,board);\n\tc.restore();\n}\n\nfunction drawMino(){\n\tvar mb = [[],[],[],[]];\n\tvar mx = rotate(mino.r);\n\t\n\tmb[1][1] = mino.id+1;\n\tfor(var i=0;i<3;i++){\n\t\tmb[mx[i][0]+1][mx[i][1]+1] = mino.id+1;\n\t}\n\t\n\tc.save();\n\tc.translate(40+20*mino.x,40+20*mino.y);\n\tdrawBlocks(4,4,mb);\n\tc.restore();\n}\n\nfunction drawNext(){\n\tvar mb = [[],[],[],[]];\n\tvar mx = shape[mino.next].concat();\n\t\n\tmb[1][1] = mino.next+1;\n\tfor(var i=1;i<4;i++){\n\t\tmb[mx[i][0]+1][mx[i][1]+1] = mino.next+1;\n\t}\n\t\n\tc.save();\n\tc.translate(280,100);\n\tsetFS(\'black\',1);\n\tc.fillRect(0,0,80,80);\n\tc.translate(00,20);\n\tc.font = \"13px \'Press Start 2P\'\";\n\tsetFS(\'white\',1);\n\tc.fillText(\"Next\",3,-4);\n\tdrawBlocks(4,4,mb);\n\tc.restore();\n}\n\nfunction drawPoint(){\n\tc.save();\n\tc.translate(280,300);\n\tsetFS(\'black\',1);\n\tc.fillRect(0,0,80,80);\n\tsetFS(\'white\',1);\n\tc.font = \"13px \'Press Start 2P\'\";\n\tc.fillText(\"Line\",3,16);\n\tc.translate(0,55);\n\tc.font = \"40px \'Press Start 2P\'\";\n\tc.fillText(clNum,3,16);\n\tc.restore();\n}\n\nfunction draw(){\n\tdrawBoard();\n\tdrawNext();\n\tdrawPoint();\n\tdrawMino();\n}\n\nfunction op(){\n\tdrawBoard();\n\tc.save();\n\tc.translate(45,150);\n\tsetFS(\'white\',1);\n\tc.font = \"30px \'Press Start 2P\'\";\n\tc.fillText(\"TETRIS\",3,16);\n\tc.translate(10,50);\n\tc.font = \"11px \'Press Start 2P\'\";\n\tc.fillText(\"press space key\",3,16);\n\tc.restore();\n}\n\nfunction dSelect(){\n\tdrawBoard();\n\tc.save();\n\tc.translate(45,150);\n\tsetFS(\'white\',1);\n\tc.font = \"30px \'Press Start 2P\'\";\n\tc.fillText(\"TETRIS\",3,16);\n\tc.translate(10,50);\n\tc.font = \"11px \'Press Start 2P\'\";\n\tc.fillText(\"difficulity\",3,16);\n\tc.translate(70,40);\n\tc.fillText(\"HARD\",3,16);\n\tc.translate(0,40);\n\tc.fillText(\"NORMAL\",3,16);\n\tc.translate(0,40);\n\tc.fillText(\"EASY\",3,16);\n\tc.translate(-50,-40*dif);\n\tc.fillText(\">>>\",3,16);\n\tc.restore();\n}\n\nfunction gameOver(){\n\tc.save();\n\tc.translate(80,150);\n\tsetFS(\'white\',1);\n\tc.font = \"30px \'Press Start 2P\'\";\n\tc.fillText(\"GAME\",0,0);\n\tc.fillText(\"OVER\",0,40);\n\tc.translate(-25,50);\n\tc.font = \"11px \'Press Start 2P\'\";\n\tc.fillText(\"press space key\",3,16);\n\tc.restore();\n}\n\nfunction gameClear(){\n\tc.save();\n\tc.translate(80,150);\n\tsetFS(\'white\',1);\n\tc.font = \"30px \'Press Start 2P\'\";\n\tc.fillText(\"GAME\",0,0);\n\tc.fillText(\"CLEAR\",-15,40);\n\tc.translate(-25,50);\n\tc.font = \"11px \'Press Start 2P\'\";\n\tc.fillText(\"press space key\",3,16);\n\tc.restore();\n}\n";
static const char xorsjs_code[299] = "var xors = xors || {};\n\nxors = {\n\tx: 123456789,\n\ty: 362436069,\n\tz: 521288629,\n\tw: 438201203,\n\tmax:7\n};\n\nxors.rand = function() {\n\tvar t;\n\tt = xors.x ^ (xors.x << 11);\n\txors.x = xors.y;\n\txors.y = xors.z;\n\txors.z = xors.w;\n\txors.w = xors.w=(xors.w^(xors.w>>19))^(t^(t>>8))\n\treturn xors.w%xors.max;\n}\n";
static const char tetrisjs_code[1503] = "var canvas = document.getElementById(\'canvas\');\nvar c = canvas.getContext(\'2d\');\n\nvar board = new Array(10);\nvar mode = 0;\nvar keyF = true;\n\nvar clNum = 4;\n\nvar modeTID;\n\nvar dif = 1;\n\nfunction init() {\n\tfor(var i=0;i<10;i++){\n\t\tboard[i] = new Array(21);\n\t\tif(i<3||i>6){\n\t\t\tboard[i][0] = 0;\n\t\t}\n\t}\n\t\n\tclNum = 40;\n\tnextMino();\n\tnextMino();\n\tc.save();\n\tfor(var i=0;i<20;i++){\n\t\tfor(var j=0;j<24;j++){\t\t\t\t\n\t\t\tblock(0);\n\t\t\tc.translate(0,20);\n\t\t}\n\tc.translate(20,-480);\n\t}\n\tc.restore();\n\tdrawBoard();\n\tc.fillRect(280,100,80,80);\n\tdrawPoint();\n}\n\ninit();\nmodeTID = setInterval(op,100);\n\ndocument.body.onkeydown = function( e ) {\n    var keys = {\n        37: \'l\',\n\t\t38: \'u\',\n        39: \'r\',\n        40: \'d\',\n        32: \'s\',\n\t\t84: \'t\'\n    };\n\tif(keyF){\n\t\tswitch(mode){\n\t\t\tcase 0:\n\t\t\t\tif(keys[e.keyCode] == \'s\') {\n\t\t\t\t\tmode++;\n\t\t\t\t\tclearInterval(modeTID);\n\t\t\t\t\tdSelect();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tswitch(keys[e.keyCode]){\n\t\t\t\t\tcase \'u\':\n\t\t\t\t\t\tdif++;\n\t\t\t\t\t\tif(dif>2){dif=2;}\n\t\t\t\t\t\tdSelect();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \'d\':\n\t\t\t\t\t\tdif--;\n\t\t\t\t\t\tif(dif<0){dif=0;}\n\t\t\t\t\t\tdSelect();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \'s\':\n\t\t\t\t\t\tmode++;\n\t\t\t\t\t\tnextMino();\n\t\t\t\t\t\tdraw();\n\t\t\t\t\t\ttID = setInterval(tick,1000-350*dif);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tmove(keys[e.keyCode]);\n\t\t\t\tfreeze();\n\t\t\t\tdraw();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif(keys[e.keyCode] == \'s\') {\n\t\t\t\t\tclearInterval(modeTID);\n\t\t\t\t\tmode=0;\n\t\t\t\t\tinit();\n\t\t\t\t\tmodeTID = setInterval(op,100);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:break;\n\t\t}\n\t}\n}\n";
static const char blocksjs_code[3679] = "var color = [\'gray\',\'#33FFFF\',\'green\',\'red\',\'blue\',\'#FF9900\',\'#6600FF\',\'#FFFF00\'];\n\nvar shape = \n[\n\t[2,[-1, 0],[ 1, 0],[ 2, 0]],\n\t[4,[ 0,-1],[ 1,-1],[-1, 0]],\n\t[4,[-1,-1],[ 0,-1],[ 1, 0]],\n\t[4,[-1,-1],[-1, 0],[ 1, 0]],\n\t[4,[ 1,-1],[-1, 0],[ 1, 0]],\n\t[4,[ 0,-1],[-1, 0],[ 1, 0]],\n\t[1,[ 0,-1],[ 1,-1],[ 1, 0]]\n];\n\nvar mino = {\n\tx : 3,\n\ty : 0,\n\tid : 0,\n\tr : 0,\n\tnext:0,\n\tnext2:0\n};\n\nvar fTime = 0;\nvar cl = new Array(4);\nvar l = 0;\nvar clAC=0;\nvar clAID;\nvar tID;\n\nfunction nextMino(){\n\tmino.x = 3;\n\tmino.y = 0;\n\tmino.id = mino.next;\n\tmino.next = mino.next2; \n\tmino.next2 = xors.rand(); \n\tmino.r = 0;\n\t\n\tvar mx = calcMx(0,0,0);\n\t\n\tfor(var i=0;i<4;i++){\n\t\tif(board[mx[i][0]][mx[i][1]] != null){\n\t\t\tclearInterval(tID);\n\t\t\tmode = 3;\n\t\t\tgameOver();\n\t\t\tmodeTID = setInterval(gameOver,10);\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction rotate(r){\n\tvar mx = [\n\t\tshape[mino.id][1].concat(),\n\t\tshape[mino.id][2].concat(),\n\t\tshape[mino.id][3].concat()\n\t];\n\t\n\tif(r == 0){\n\t\treturn mx;\n\t}else{\n\t\tfor(var i=0;i<r;i++){\n\t\t\tvar newMx = [[],[],[]];\n\t\t\tfor(j=0;j<3;j++){\n\t\t\t\tnewMx[j][0] = mx[j][1]*-1;\n\t\t\t\tnewMx[j][1] = mx[j][0];\n\t\t\t}\n\t\t\tmx = newMx.concat();\n\t\t}\n\t\treturn mx;\n\t}\n}\n\nfunction calcMx(offsetX,offsetY,r){\n\tvar mx = [[],[],[],[]];\n\tvar rx = rotate(r);\t\n\tfor(var i=0;i<3;i++){\n\t\tmx[i][0] = rx[i][0] + 1 + mino.x + offsetX;\n\t\tmx[i][1] = rx[i][1] + 1 + mino.y + offsetY;\n\t}\n\tmx[3][0] = 1 + mino.x + offsetX;\n\tmx[3][1] = 1 + mino.y + offsetY;\n\treturn mx;\n}\n\nfunction valid(offsetX,offsetY,r){\n\tvar mx = calcMx(offsetX,offsetY,r);\t\n\tfor(var i=0;i<4;i++){\n\t\tif((mx[i][0] < 0 || mx[i][0] > 9)\n\t\t || (mx[i][1] < 0 || mx[i][1] > 19)\n\t\t || (board[mx[i][0]][mx[i][1]] != null)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction freeze(){\n\tif(!valid(0,1,mino.r)){\n\t\tif(fTime<=0){\n\t\t\tvar mx = calcMx(0,0,mino.r);\t\n\t\t\tfor(i=0;i<4;i++){\n\t\t\t\tboard[mx[i][0]][mx[i][1]] = mino.id+1;\n\t\t\t}\n\t\t\tif(!searchCL()){\n\t\t\t\tnextMino();\n\t\t\t}\n\t\t}else{\n\t\t\tfTime--;\n\t\t}\n\t}else{\n\t\tfTime = 3;\n\t}\n}\n\nfunction searchCL(){\n\tcl = new Array(4);\n\tl = 0;\n\t\n\tfor(var i = 1;i<21;i++){\n\t\tfor(var j=0;j<10;j++){\n\t\t\tif(board[j][i] == null) break;\n\t\t\tif(j==9) {\n\t\t\t\tcl[l] = i;\n\t\t\t\tl++;\n\t\t\t}\n\t\t}\n\t}\n\tif(l>0){\n\t\tclAC = 1;\n\t\tkeyF = false;\n\t\tclearInterval(tID);\n\t\tclAID = setInterval(animateCL,250);\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\nfunction animateCL(){\n\tif(clAC != 0){\n\t\tsetFS(\'black\',1);\n\t\tfor(var i=0;i<l;i++){\n\t\t\t\tc.fillRect(40,40+cl[i]*20,200,20);\n\t\t}\n\t\tclAC--;\n\t}else{\n\t\tclearInterval(clAID);\n\t\tdeleteCL();\n\t\tkeyF = true;\n\t\tclNum = clNum - l;\n\t\tif(clNum<=0){\n\t\t\tclNum = 0;\n\t\t\tclearInterval(tID);\n\t\t\tmode = 3;\n\t\t\tgameClear();\n\t\t\tmodeTID = setInterval(gameClear,10);\n\t\t}\n\t\tdrawPoint();\n\t}\n}\n\nfunction deleteCL(){\t\n\tfor(var i=0;i<l;i++){\n\t\tfor(var j=cl[i]; j>1;j--){\n\t\t\tfor(var k=0;k<10;k++){\n\t\t\t\tboard[k][j] = board[k][j-1];\n\t\t\t}\n\t\t}\n\t\tfor(var k=0;k<10;k++){\n\t\t\t\tboard[k][1] = undefined;\n\t\t}\n\t}\n\ttID = setInterval(tick,1000-350*dif);\n\tnextMino();\n\tdraw();\n}\n\nfunction hardDrop(){\n\tvar dy=0;\n\twhile(valid(0,dy,mino.r)){\n\t\tdy++;\n\t}\n\tmino.y += dy - 1;\n\tfTime = 0;\n}\n\nfunction tick(){\n\tif(valid(0,1,mino.r)){\n\t\tmino.y++;\n\t}else{\n\t\tfreeze();\n\t}\n\tdraw();\n}\n\nfunction move(key){\n\tswitch(key){\n\t\tcase \'u\': \n\t\t\tif(mino.r + 1 >= shape[mino.id][0]){\n\t\t\t\tif(valid(0,0,0)) mino.r=0;\n\t\t\t}else{\n\t\t\t\tif(valid(0,0,mino.r+1)) mino.r++;\n\t\t\t}\n\t\t\tmino.next2 = xors.rand();\n\t\t\tbreak;\n\t\tcase \'l\': \n\t\t\tif(valid(-1,0,mino.r)) mino.x--;\n\t\t\tmino.next2 = xors.rand();\n\t\t\tbreak;\n\t\tcase \'r\': \n\t\t\tif(valid(1,0,mino.r)) mino.x++;\n\t\t\tmino.next2 = xors.rand();\n\t\t\tbreak;\n\t\tcase \'s\': \n\t\t\thardDrop();\n\t\t\tbreak;\n\t\tcase \'d\': \n\t\t\tif(valid(0,1,mino.r)) mino.y++;\n\t\t\tmino.next2 = xors.rand();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmino.next2 = xors.rand();\n\t\t\tbreak;\n\t}\n}\n";
static const char tetrishtml_code[883] = "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>HTML5 TETRIS made by Arduino</title>\n\n<link href=\'http://fonts.googleapis.com/css?family=Press+Start+2P\' rel=\'stylesheet\' type=\'text/css\'>\n\n<style type=\"text/css\">\nbody {\n\tfont-family: \"Press Start 2P\";\n\tfont-size:11px;\n\tbackground-color:#000;\n\tcolor:#FFF;\n}\n#main{\n\tmargin:50px;\n\twidth:400px;\n}\n</style>\n</head>\n\n<div id=\"main\">\n\t<canvas id=\"canvas\" width=\"400px\" height=\"480px\">\n\t\t<script type=\"text/javascript\" src=\'xors.js\'></script>\n\t\t<script type=\"text/javascript\" src=\'blocks.js\'></script>\n\t\t<script type=\"text/javascript\" src=\'draw.js\'></script>\n\t\t<script type=\"text/javascript\" src=\'tetris.js\'></script>\n\t</canvas>\n\t<h1>TETRIS</h1>\n\t<p>\n\tmade by arduino<br><br>\n\tClear 40 lines!\n\t</p>\n\t<hr>\n\t<h3>control</h3>\n\t<p>\n\tarrow - up : rotate<br>\n\tarrow - d/l/r : move<br>\n\tspace : hard drop\n\t</p>\n</div>\n</body>\n</html>\n";

#define CODE_NUM 5

typedef struct SRCCODE {
  const char *name;
  const char *code;
  const unsigned int size;
} srccode;

static const srccode code[5] = {
  {"draw.js", drawjs_code, 3070},
  {"xors.js", xorsjs_code, 299},
  {"tetris.js", tetrisjs_code, 1503},
  {"blocks.js", blocksjs_code, 3679},
  {"tetris.html", tetrishtml_code, 883}
};
